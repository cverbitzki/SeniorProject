% % % Headers and definitions
\documentclass{report}
%\usepackage{times}

\usepackage{fullpage} % sets more standardized margins
\usepackage{graphicx} % some graphics functions I use 
\usepackage{abstract} % abstract function
\usepackage{mathtools}
\usepackage{float}
\usepackage{array}
\usepackage{gensymb}

\renewcommand{\absnamepos}{flushleft} % left justifies abstract
\setlength{\absleftindent}{0pt}
\setlength{\absrightindent}{0pt}

% % %
% Set up IEEE style paragraphing
% % %
\setlength{\parskip}{1em} % The \par command now skips a line between paragraphs, eliminates warnings from using the \par or \\ commands
\setlength{\parindent}{0em} % Left justifies paragraphs after a \par command 
\usepackage{etoolbox}
\makeatletter
\pretocmd{\section}{\addtocontents{toc}{\protect\addvspace{0\p@}}}{}{}
\pretocmd{\subsection}{\addtocontents{toc}{\protect\addvspace{0\p@}}}{}{}
\pretocmd{\subsubsection}{\addtocontents{toc}{\protect\addvspace{0\p@}}}{}{}
\makeatother

\begin{document}

\pagenumbering{gobble} % Turn off page numbering for titles and tables

% Title and autheor
% Title and autheor
\title{ \textbf{ECE 403 Design Project}\\
	{Door Lock Monitoring System Report}\\
		University of Maine}
		\author{Jordan Millett, Computer Engineering\\
		  	Christopher Verbitzki, Computer Engineering}
			\date{Febuary 13, 2017}
			\maketitle


			% % % % % % % % % % % % % % %		
			% Abstract 
			\begin{abstract}
			The design of the electronic door lock system is described. The system  receives input from a physical keypad or through a web server to lock or unlock a deadbolt door lock. The web server is hosted on a Raspberry Pi. It features user access control, displaying the status of the lock, and history of access. The system also is able to feed a picture of what is in front of the door to the web server as well as controlling the outside lighting. An Android application and web client are designed to interface with the web server. A breakout board is designed for the Raspberry Pi. The breakout board handles the control of the dead bolt and outside lighting based off of input from the Pi or keypad.
			\end{abstract}

			% % % % % % % % % % % % % % % 
			% Tables of contents, figures, tables, acronyms, etc
			\newpage % jumps to new page

			\tableofcontents


			\newpage
			\listoffigures
			\listoftables

			\newpage 
			\clearpage

			\pagenumbering{arabic} % Turn on page numbering

			% % % % % % % % % % % % % % %
			% Introduction
			\section{Introduction}

			\subsection{Project Purpose}
			\subsection{Project Description}

			\subsection{Project Specifications}
			%PUT SPECIFICATIONS IN TABLE SHEAFF DOESNT LIKE LISTS
			% % % % % % % % % % % % % % %
			% Overview
			\section{Breakdown}
			This section provides a brief overview of the main functional blocks that make up this project. The functional blocks consist of the user interface (UI) or inputs, hardware attached to Raspberry Pi, motor driver, light controller, and battery backup. This section will further look into both the hardware and software components of the functional blocks listed. Figure \ref{fig:BlockDiag} below shows the block diagram of the project.

			\begin{figure}[H]
			\centering
			\includegraphics[width=.7\textwidth]{BlockDiagram_v2.png}
			\caption{Functional block diagram of Door Lock Monitoring System}
			\label{fig:BlockDiag}
			\end{figure}

			As Figure \ref{fig:BlockDiag} shows, the system is powered by a Battery Backup circuit that is used to switch between mains power and battery power depending on availability. When on battery power only essential functions of the lock are in operation. The Door Lock Monitoring System works as two halves, which are connected between the Web Server and Control Unit. One half, with the Web Server, receives input from either the Android Application or Website and informs the Control Unit appropriately. Lastly on the other side, with the Control Unit, handles the Physical UI or keypad, as well as controlling the door lock itself or the light switch based on one of the inputs. 

			\subsection{Hardware}
			There are four blocks from Figure \ref{fig:BlockDiag} that are made up of hardware. The only functional block that has no hardware is the user interface which is made up of only software running on the Raspberry Pi and a smart phone with an Android operating system. The following subsections look at the hardware aspects of the functional blocks in Figure \ref{fig:BlockDiag}.

			\subsubsection{Keypad Interface}
			The keypad is the physical user interface that can be used to control the lock. Capabilities include unlocking and locking the door with a user set pass code, controlling the light switch, and changing the pass code. The keypad interface also uses two LEDs to inform the user about the state of the lock, and for when changing the pass code. 

			\subsubsection{Battery Backup}
			The battery backup is what handles the power delivery for the rest of the components. The circuit will normally use mains power, but when it is unplugged, or during a power outage, will switch to battery power. To maximize battery life, only critical components will actually receive battery power during an outage. These being the control unit and the motor driver. The battery backup circuit was designed such that there will be no loss of power to the components when switching between mains and the battery.

			\subsubsection{Motor Driver}
			The motor driver powers the motor based off of input from the control unit. The control unit is not able to supply enough power to move the motor, so it simply controls the motor driver, which handles the power delivery. The door lock motor is a two-phase stepper motor, meaning there are two phases in the motor that need to be powered separately. Furthermore, the current through the phases has to be able to be reversed, therefore the motor driver consists of two H-bridges which are able to meet these requirements. 

			\subsubsection{Light Switch}
			The light switching circuit is composed of a few components that allow the control unit to turn on and off a 120 VAC light bulb with only a 5V signal. The circuit uses an optoisolator and a bidirectional triode thyristor (TRIAC) to achieve this. The optoisolator was used in this circuit to keep the power to the control unit separated from the 120 VAC power. The purpose of the TRIAC is to allow such a small voltage and current produced from the control unit to control a much larger voltage and current that is used to light the light bulb.

			\subsection{Software}
			For this project software was developed in a variety of different programming languages. Software was developed for the control unit, Android Application, Website interface, and for the serial peripheral interface between the Raspberry Pi and control unit. The following subsections will provide a breakdown of the systems developed software.

			\subsubsection{Control Unit}
			The control unit for this project has three inputs and three outputs. The inputs consist of first the keypad presses which are used to verify the password for locking/unlocking the deadbolt. The other input to the system is information being sent from the Raspberry Pi over SPI. This information contains a code that informs the control unit of the current lock state, light state, and doorbell state. The final input to the control unit is two readings from two photo sensors that are set on the deadbolts locked and unlocked position. These sensors are used to verify if the deadbolt is in the same position that software thinks it is in.

			The first output of the control unit is four control signals that are sent to the motor driver circuit which are used to energize the two phases on the stepper motor. The next output is a single control signal that is sent to the light control unit circuit that simply switches the 120 VAC on and off. The final output is multiple control signals that are used to illuminate infrared (IR) light emitting diodes (LED), an red green blue (RGB) LED, and two green LEDs. The IR LEDs are used to establish a light source for the photo photo sensor inputs. The RGB led is used to indicate the current state of the deadbolt lock. The green LEDs are used to provide feedback to the user of what mode the system is currently in.

			\subsubsection{Serial Peripheral Interface}

			The communication protocol for this system uses the serial peripheral interface (SPI). The purpose of this protocol is to transfer information between the control unit and the Raspberry Pi. This information consists of the current locks state, light state, and doorbell state. The two sides of this communication are working to update each side to the same correct states. 

			\subsubsection{Web Interface and Android Application}
			The on the go control for this project is made up of a web server, website interface, and Android application interface. The web server is used to host the website, provide information for the Android application, and store data in a SQL database on the back end. The website interface is used to allow the user of the system to view a log of the door locks activity, toggle the state of the lock, toggle the state of the light, and view a picture of the doors surroundings. The Android applications purpose is similar to the website interface in the sense that it has all the same features as the website. The Android application has a feature that is not on the website which is a doorbell monitor. When the doorbell is pressed on the system the Android application will receive a notification saying "Doorbell Rang" and then after 5 seconds another notification will appear with four different pictures of the doors surroundings so the user can know who rang the doorbell.

			% % % % % % % % % % % % % % %		
			% Design
			\section{Design}

			Jordan
			\subsection{Hardware Design}
			Jordan
			\subsubsection{Keypad Interface}
			Chris
			\subsubsection{Motor Driver Circuitry}
			Chris
			\subsubsection{Battery Backup Circuitry}
			Jordan
			\subsubsection{Light Switching Circuitry}
			Jordan
			\subsection{Software Design}
			Chris
			\subsubsection{Control Unit}
			Chris
			\subsubsection{Serial Peripheral Interface}
			Jordan
			\subsubsection{Web Interface and Android Application}
			Chris
			% % % % % % % % % % % % % % %		
			% Results
			\section{Results}
			Chris

			\subsection{Stepper Motor}
			Jordan

			\subsection{Keypad Interface}
			Chris
			\subsection{Wireless Control}
			Chris

			% % % % % % % % % % % % % % %		
			% Conclusion
			\section{Conclusion}
			Jordan

			% % % % % % % % % % % % % % %		
			% Appendices
			\appendix
			\section{Project Contract}

			\section{Parts List}

			\section{List of Sources}

			[1] Andras Tantos, “H-Bridges - the basics”, www.modularcircuits.com/blog/articles/h-bridge-secrets/h-bridges-the-basics/

			[2] Robot Room, “H-Bridge Motor Driver Using Bipolar Transistors”, www.robotroom.com/BipolarHBridge.html

			[3] Electronics Tutorials, “Triac Tutorial”, www.electronics-tutorials.ws/power/triac.html

			[4] AsmyIdof StackExchange user, “Transistor Battery Backup Circuit”, www.electronics.stackexchange.com/a/179355

			[5] Dakota Carll and Chris Martin, Advice on Battery Backup component selection

			[6] Andrew Sheaff and Nuri Emanetoglu

			[7] Nick Levesque, Soldering equipment and advice
			\end{document}




